// src/services/emailService.ts
import nodemailer from 'nodemailer';
import { EmailConfig, gmailConfig } from '../config/email-config';
import { generateLoanApplicationEmail } from '../utils/emailTemplates';
import { EmailData } from '../types/email.types';

export interface EmailOptions {
  to: string | string[];
  subject: string;
  text?: string;
  html?: string;
  from?: string;
  cc?: string | string[];
  bcc?: string | string[];
  attachments?: Array<{
    filename: string;
    path?: string;
    content?: Buffer | string;
    contentType?: string;
  }>;
}

// Create transporter instance
const createTransporter = (config: EmailConfig) => {
  return nodemailer.createTransport(config);
};

// Default configuration and transporter
const defaultConfig = gmailConfig; // or sendGridConfig, smtpConfig
const defaultFrom = process.env.DEFAULT_FROM_EMAIL || 'info@edumateglobal.com';
const transporter = createTransporter(defaultConfig);

export const sendEmail = async (options: EmailOptions): Promise<void> => {
  try {
    const mailOptions = {
      from: options.from || defaultFrom,
      to: Array.isArray(options.to) ? options.to.join(', ') : options.to,
      cc: Array.isArray(options.cc) ? options.cc.join(', ') : options.cc,
      bcc: Array.isArray(options.bcc) ? options.bcc.join(', ') : options.bcc,
      subject: options.subject,
      text: options.text,
      html: options.html,
      attachments: options.attachments,
    };

    const info = await transporter.sendMail(mailOptions);
    console.log('Email sent successfully:', info.messageId);
  } catch (error) {
    console.error('Error sending email:', error);
    throw error;
  }
};

export const verifyConnection = async (): Promise<boolean> => {
  try {
    await transporter.verify();
    console.log('Email server connection verified');
    return true;
  } catch (error) {
    console.error('Email server connection failed:', error);
    return false;
  }
};

// Utility functions for sending common email types
export const sendLoanEligibilityResultEmail = async (
  to: string,
  applicationData: EmailData
): Promise<void> => {
  const emailHTML = generateLoanApplicationEmail(applicationData);
  await sendEmail({
    to,
    subject: "Welcome!",
    html: emailHTML,
    text: `Welcome, ${"userName"}! Thank you for joining our platform. We're excited to have you on board!`,
  });
};

export const sendPasswordResetEmail = async (to: string, resetLink: string): Promise<void> => {
  await sendEmail({
    to,
    subject: 'Password Reset Request',
    html: `
      <h1>Password Reset</h1>
      <p>Click the link below to reset your password:</p>
      <a href="${resetLink}">Reset Password</a>
      <p>This link will expire in 1 hour.</p>
    `,
    text: `Password Reset: ${resetLink} (expires in 1 hour)`,
  });
};

// Repayment-schedule email
export interface ScheduleEmailOptions {
  email: string;
  fromName?: string;
  subject?: string;
  message?: string;
  pdfBuffer: Buffer;
  pdfFileName: string;
}

export const sendRepaymentScheduleEmail = async (options: ScheduleEmailOptions): Promise<void> => {
  const {
    email,
    fromName = 'Edumate',
    subject = 'Your Loan Repayment Schedule',
    message = 'Please find attached your detailed loan repayment schedule.',
    pdfBuffer,
    pdfFileName,
  } = options;

  const htmlMessage = `
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Loan Repayment Schedule</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          line-height: 1.6;
          color: #333;
          max-width: 600px;
          margin: 0 auto;
          padding: 20px;
        }
        .header {
          background: linear-gradient(135deg, #007bff, #0056b3);
          color: white;
          padding: 30px 20px;
          border-radius: 8px 8px 0 0;
          text-align: center;
        }
        .content {
          background: #f8f9fa;
          padding: 30px 20px;
          border-radius: 0 0 8px 8px;
          border: 1px solid #dee2e6;
          border-top: none;
        }
        .highlight {
          background: #e3f2fd;
          border-left: 4px solid #007bff;
          padding: 15px;
          margin: 20px 0;
          border-radius: 4px;
        }
        .footer {
          text-align: center;
          margin-top: 30px;
          padding-top: 20px;
          border-top: 1px solid #dee2e6;
          color: #6c757d;
          font-size: 12px;
        }
        .attachment-info {
          background: #fff3cd;
          border: 1px solid #ffeaa7;
          border-radius: 4px;
          padding: 15px;
          margin: 20px 0;
        }
        .attachment-info .icon {
          font-size: 24px;
          margin-right: 10px;
        }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>ðŸ“Š Your Loan Repayment Schedule</h1>
        <p>Generated by ${fromName}</p>
      </div>
      
      <div class="content">
        <p>Dear Valued Customer,</p>
        
        <p>${message}</p>
        
        <div class="highlight">
          <strong>ðŸ“Ž What's included in your schedule:</strong>
          <ul style="margin: 10px 0 0 20px;">
            <li>Complete monthly payment breakdown</li>
            <li>Principal and interest components</li>
            <li>Yearly summary and remaining balance</li>
            <li>Total interest and amount payable</li>
          </ul>
        </div>
        
        <div class="attachment-info">
          <span class="icon">ðŸ“‹</span>
          <strong>Attachment:</strong> ${pdfFileName}
          <br>
          <small>Please save this document for your records</small>
        </div>
        
        <p>If you have any questions about your repayment schedule or need assistance with your loan, please don't hesitate to contact our customer support team.</p>
        
        <p>Thank you for choosing ${fromName} for your financial needs.</p>
        
        <p>Best regards,<br>
        <strong>${fromName} Team</strong></p>
      </div>
      
      <div class="footer">
        <p>This email was generated automatically. Please do not reply to this email.</p>
        <p>Â© ${new Date().getFullYear()} ${fromName}. All rights reserved.</p>
      </div>
    </body>
    </html>
  `;

  await sendEmail({
    to: email,
    subject,
    text: message,
    html: htmlMessage,
    attachments: [
      {
        filename: pdfFileName,
        content: pdfBuffer,
        contentType: 'application/pdf',
      },
    ],
  });
};