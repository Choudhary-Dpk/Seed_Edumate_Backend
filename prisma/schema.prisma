generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model LoanEligibilityMatrix {
  id                      Int      @id @default(autoincrement())
  country_of_study        String?  @db.VarChar(100)
  level_of_education      String?  @db.VarChar(50)
  course_type             String?  @db.VarChar(100)
  is_stem_designated      Boolean?
  analytical_exam_name    String?  @db.VarChar(50)
  language_exam_name      String?  @db.VarChar(50)
  preference              String?  @db.VarChar(20)
  loan_amount             Decimal? @db.Decimal(12, 2)
  loan_amount_currency    String?  @db.VarChar(3)
  analytical_score_min    Decimal? @db.Decimal(6, 2)
  analytical_score_max    Decimal? @db.Decimal(6, 2)
  language_exam_score_min Decimal? @db.Decimal(6, 2)
  language_exam_score_max Decimal? @db.Decimal(6, 2)

  @@index([loan_amount, loan_amount_currency], map: "idx_amount_currency")
  @@index([analytical_exam_name], map: "idx_analytical_exam")
  @@index([country_of_study, level_of_education], map: "idx_country_education")
  @@index([country_of_study], map: "idx_country_study")
  @@index([course_type], map: "idx_course_type")
  @@index([loan_amount_currency], map: "idx_currency")
  @@index([level_of_education], map: "idx_education_level")
  @@index([language_exam_name], map: "idx_language_exam")
  @@index([loan_amount], map: "idx_loan_amount")
  @@index([preference], map: "idx_preference")
  @@index([is_stem_designated], map: "idx_stem_designated")
  @@index([is_stem_designated, preference], map: "idx_stem_preference")
  @@map("loan_eligibility_matrix")
}
model Role {
  id          Int       @id @default(autoincrement())
  role        String    @unique
  display_name String
  description String?
  
  users       UserRole[]
  permissions RolePermission[]

  @@map("roles")
}

model UserRole {
  id      Int  @id @default(autoincrement())
  user_id Int  @map("user_id")
  role_id Int  @map("role_id")

  // Relations
  user User @relation("UserRole",fields: [user_id], references: [id], onDelete: Cascade)
  role Role @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@unique([user_id, role_id])
  @@map("user_roles")
}

model Session {
  id                 Int      @id @default(autoincrement())
  user_id            Int      @map("user_id")
  refresh_token_hash String   @map("refresh_token_hash")
  device_info        String?  @map("device_info")
  ip_address         String?  @db.Inet @map("ip_address")
  is_valid           Boolean  @default(true) @map("is_valid")
  created_at         DateTime @default(now()) @map("created_at")
  expires_at         DateTime? @map("expires_at")

  // Relation
  user User @relation("Session",fields: [user_id], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum LoginStatus {
  success
  failed
  logout
}

model LoginHistory {
  id          Int      @id @default(autoincrement())
  user_id     Int      @map("user_id")
  ip_address  String?  @db.Inet @map("ip_address")
  device_info String?  @map("device_info")
  status      LoginStatus @map("status")
  created_at  DateTime @default(now()) @map("created_at")

  // Relation
  user User @relation("LoginHistory",fields: [user_id], references: [id], onDelete: Cascade)

  @@map("login_history")
}

model Permission {
  id          Int     @id @default(autoincrement())
  permission  String  @unique @map("permission")
  module      String? @map("module")

  roles RolePermission[]

  @@map("permissions")
}

model RolePermission {
  id            Int  @id @default(autoincrement())
  role_id       Int  @map("role_id")
  permission_id Int  @map("permission_id")

  // Relations
  role       Role       @relation(fields: [role_id], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)

  @@unique([role_id, permission_id])
  @@map("role_permissions")
}

// B2B Partners - Main Entity
model B2BPartner {
  id                    Int      @id @default(autoincrement())
  
  // Basic Information (from b2b_partners_information group)
  business_address      String?
  business_type         String?  // Individual, Partnership, Private Limited, Public Limited, LLP, NGO, Educational Trust
  city                  String?
  country               String?
  gst_number            String?
  incorporation_date    DateTime?
  pan_number            String?
  partner_display_name  String?
  partner_name          String?
  partner_type          String?
  pincode               String?
  registration_number   String?
  state                 String?
  website_url           String?
  
  // System tracking
  created_by            String?
  created_date          DateTime?
  data_source           String?
  integration_status    String?
  internal_tags         String?
  last_modified_by      String?
  last_modified_date    DateTime?
  notes                 String?
  partner_record_status String?
  portal_access_provided String?
  api_access_provided   String?
  
  created_at             DateTime @default(now())
  updated_at             DateTime @default(now())
  
  // Relations to normalized tables
  businessCapabilities  B2BPartnerBusinessCapabilities?
  commissionStructure   B2BPartnerCommissionStructure?
  compliance            B2BPartnerCompliance?
  contactInfo           B2BPartnerContactInfo?
  financialTracking     B2BPartnerFinancialTracking?
  leadAttribution       B2BPartnerLeadAttribution?
  marketingPromo        B2BPartnerMarketingPromo?
  partnershipDetails    B2BPartnerPartnershipDetails?
  performanceMetrics    B2BPartnerPerformanceMetrics?
  relationshipMgmt      B2BPartnerRelationshipMgmt?
  
  @@map("b2b_partners")
}

// Business Capabilities
model B2BPartnerBusinessCapabilities {
  id                      Int        @id @default(autoincrement())
  partnerId               Int        @unique
  partner                 B2BPartner @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  
  experience_years        Float?
  student_capacity_monthly Float?
  student_capacity_yearly Float?
  target_courses          String?
  target_desrinations     String?  // Note: typo in original
  target_universities     String?
  team_size               Float?
  
  @@map("b2b_partner_business_capabilities")
}

// Commission Structure
model B2BPartnerCommissionStructure {
  id                        Int        @id @default(autoincrement())
  partnerId                 Int        @unique
  partner                   B2BPartner @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  
  bank_account_number       String?
  bank_branch               String?
  bank_name                 String?
  beneficiary_name          String?
  bonus_structure           String?
  commission_model          String?
  commission_rate           Float?
  commission_type           String?
  fixed_commission_amount   Float?
  gst_applicable            String?
  ifsc_code                 String?
  invoice_requirements      String?
  payment_frequency         String?
  payment_method            String?
  payment_terms             String?
  tds_applicable            String?
  tds_rate                  Float?
  tiered_commission_structure String?
  
  @@map("b2b_partner_commission_structure")
}

// Compliance & Documentation
model B2BPartnerCompliance {
  id                           Int        @id @default(autoincrement())
  partnerId                    Int        @unique
  partner                      B2BPartner @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  
  agreement_signed_date        DateTime?
  background_verification_status String?
  kyc_completion_date          DateTime?
  kyc_status                   String?
  
  @@map("b2b_partner_compliance")
}

// Contact Information
model B2BPartnerContactInfo {
  id                         Int        @id @default(autoincrement())
  partnerId                  Int        @unique
  partner                    B2BPartner @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  
  accounts_contact_email     String?
  accounts_contact_person    String?
  accounts_contact_phone     String?
  marketing_contact_email    String?
  marketing_contact_person   String?
  marketing_contact_phone    String?
  primary_contact_designation String?
  primary_contact_email      String?
  primary_contact_person     String?
  primary_contact_phone      String?
  secondary_contact_email    String?
  secondary_contact_person   String?
  secondary_contact_phone    String?
  
  @@map("b2b_partner_contact_info")
}

// Financial Tracking
model B2BPartnerFinancialTracking {
  id                        Int        @id @default(autoincrement())
  partnerId                 Int        @unique
  partner                   B2BPartner @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  
  average_monthly_commission Float?
  current_month_commission   Float?
  last_payment_amount        Float?
  last_payment_date          DateTime?
  lifetime_value             String?
  next_payment_due_date      DateTime?
  outstanding_commission     Float?
  payment_status             String?
  total_commission_earned    Float?
  total_commission_paid      Float?
  ytd_commission_earned      Float?
  ytd_commission_paid        Float?
  
  @@map("b2b_partner_financial_tracking")
}

// Lead Attribution
model B2BPartnerLeadAttribution {
  id                      Int        @id @default(autoincrement())
  partnerId               Int        @unique
  partner                 B2BPartner @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  
  lead_submission_method  String?
  lead_tracking_method    String?
  tracking_link           String?
  unique_referral_code    String?
  utm_source_assigned     String?
  
  @@map("b2b_partner_lead_attribution")
}

// Marketing & Promotion
model B2BPartnerMarketingPromo {
  id                        Int        @id @default(autoincrement())
  partnerId                 Int        @unique
  partner                   B2BPartner @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  
  brand_usage_guidelines    String?
  co_marketing_approval     String?
  content_collaboration     String?
  digital_presence_rating   Float?
  event_participation       String?
  marketing_materials_provided String?
  promotional_activities    String?
  social_media_followers    Float?
  
  @@map("b2b_partner_marketing_promo")
}

// Partnership Details
model B2BPartnerPartnershipDetails {
  id                    Int        @id @default(autoincrement())
  partnerId             Int        @unique
  partner               B2BPartner @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  
  agreement_type        String?
  partnership_end_date  DateTime?
  partnership_start_date DateTime?
  partnership_status    String?
  
  @@map("b2b_partner_partnership_details")
}

// Performance Metrics
model B2BPartnerPerformanceMetrics {
  id                           Int        @id @default(autoincrement())
  partnerId                    Int        @unique
  partner                      B2BPartner @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  
  application_conversion_rate  Float?
  applications_approved        Float?
  approval_conversion_rate     Float?
  average_lead_quality_score   Float?
  average_loan_amount          Float?
  best_performing_month        String?
  last_lead_date               DateTime?
  lead_conversion_rate         Float?
  leads_converted_to_applications Float?
  loans_disbursed              Float?
  partner_rating               Float?
  qualified_leads_provided     Float?
  seasonal_performance_pattern String?
  total_leads_provided         Float?
  total_loan_value_generated   Float?
  
  @@map("b2b_partner_performance_metrics")
}

// Relationship Management
model B2BPartnerRelationshipMgmt {
  id                        Int        @id @default(autoincrement())
  partnerId                 Int        @unique
  partner                   B2BPartner @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  
  assigned_account_manager  String?
  communication_frequency   String?
  escalation_history        String?
  feedback_comments         String?
  joint_marketing_activities String?
  last_interaction_date     DateTime?
  relationship_status       String?
  satisfaction_score        Float?
  training_completed        String?
  
  @@map("b2b_partner_relationship_mgmt")
}

model Token {
  id        Int      @id @default(autoincrement())
  token     String
  userId    Int
  createdOn DateTime @default(now())

  user      User     @relation("Tokens", fields: [userId], references: [id])

  @@map("tokens")
}

model UserOtp {
  id        Int      @id @default(autoincrement())
  userId    Int
  otp       String
  createdOn DateTime     @default(now())

  @@map("userOtps")
}

model currency_conversion {
  id            Int       @id @default(autoincrement())
  from_currency String    @db.VarChar(3)
  to_currency   String    @db.VarChar(3)
  exchange_rate Decimal   @db.Decimal(12, 6)
  last_updated  DateTime @default(now()) @db.Timestamp(6)
  is_active     Boolean  @default(true)

  @@unique([from_currency, to_currency])
}

model User {
  id            Int        @id @default(autoincrement())
  b2b_id      Int
  email         String     @unique @map("email")
  password_hash String?     @map("password_hash")
  full_name     String?    @map("full_name")
  is_active     Boolean    @default(true) @map("is_active")
  created_at    DateTime   @default(now()) @map("created_at")
  updated_at    DateTime   @default(now()) @updatedAt @map("updated_at")

  // Back relation
  roles         UserRole[] @relation("UserRole")
  sessions      Session[] @relation("Session")
  loginHistory  LoginHistory[] @relation("LoginHistory")
  loanApplications    LoanApplication[] @relation("UserLoanApplications")
  assignedApplications LoanApplication[] @relation("AssignedCounselor")
  createdApplications LoanApplication[] @relation("CreatedBy")
  modifiedApplications LoanApplication[] @relation("LastModifiedBy")
  communications       CommunicationLog[]  @relation("UserCommunications")
  uploadedFiles  FileUpload[] @relation("FileUpload")
  emailHistory EmailHistory[] @relation("EmailHistory")
  tokens Token[] @relation("Tokens")
  deleted_by  LoanApplication[] @relation("DeletedBy")

  @@map("users")
}

model LoanApplication {
  id                      Int      @id @default(autoincrement())
  application_date        DateTime @default(now())
  lead_reference_code     String?  @unique
  student_id              String?  @unique
  student_name            String
  student_email           String
  student_phone           String?
  application_source      ApplicationSource @default(DIRECT)
  assigned_counselor_id   Int?
  b2b_partner_id          String?
  external_reference_id   String?
  is_deleted              Boolean  @default(false)

  // Foreign Keys
  user_id                 Int

  // System tracking
  created_by_id           Int?
  last_modified_by_id     Int?
  deleted_by_id           Int?          // 👈 new field
  created_at              DateTime @default(now())
  updated_at              DateTime @default(now()) @updatedAt
  deleted_at              DateTime?

  // Relations
  user                    User     @relation("UserLoanApplications", fields: [user_id], references: [id])
  assigned_counselor      User?    @relation("AssignedCounselor", fields: [assigned_counselor_id], references: [id])
  created_by              User?    @relation("CreatedBy", fields: [created_by_id], references: [id])
  last_modified_by        User?    @relation("LastModifiedBy", fields: [last_modified_by_id], references: [id])
  deleted_by              User?    @relation("DeletedBy", fields: [deleted_by_id], references: [id])

  // One-to-One relations
  academic_details        AcademicDetails?
  financial_requirements  FinancialRequirements?
  application_status      ApplicationStatus?
  lender_information      LenderInformation?
  document_management     DocumentManagement?
  processing_timeline     ProcessingTimeline?
  rejection_details       RejectionDetails?
  communication_prefs     CommunicationPreferences?
  system_tracking         SystemTracking?

  // One-to-Many relations
  commission_records      CommissionRecord[]
  additional_services     AdditionalService[]
  communication_logs      CommunicationLog[]

  @@index([student_email])
  @@index([application_date])
  @@index([assigned_counselor_id])
  @@map("loan_applications")
}

// ACADEMIC DETAILS

model AcademicDetails {
  id                         Int       @id @default(autoincrement())
  loan_application_id        Int       @unique
  target_course              String?
  target_university          String?
  target_university_country  String?
  course_level               CourseLevel?
  course_start_date          DateTime?
  course_end_date            DateTime?
  course_duration            Int?      // in months
  admission_status           AdmissionStatus @default(NOT_APPLIED)
  visa_status               VisaStatus @default(NOT_APPLIED)
  i20_cas_received          I20CasStatus @default(NOT_APPLICABLE)
  created_at                DateTime  @default(now())
  updated_at                DateTime  @default(now()) @updatedAt

  // Relations
  loan_application          LoanApplication @relation(fields: [loan_application_id], references: [id], onDelete: Cascade)

  @@map("academic_details")
}

// FINANCIAL REQUIREMENTS

model FinancialRequirements {
  id                        Int     @id @default(autoincrement())
  loan_application_id       Int     @unique
  loan_amount_requested     Decimal @db.Decimal(12, 2)
  loan_amount_approved      Decimal? @db.Decimal(12, 2)
  loan_amount_disbursed     Decimal? @db.Decimal(12, 2)
  tuition_fee              Decimal? @db.Decimal(12, 2)
  living_expenses          Decimal? @db.Decimal(12, 2)
  travel_expenses          Decimal? @db.Decimal(12, 2)
  insurance_cost           Decimal? @db.Decimal(12, 2)
  other_expenses           Decimal? @db.Decimal(12, 2)
  total_funding_required   Decimal? @db.Decimal(12, 2)
  scholarship_amount       Decimal? @db.Decimal(12, 2)
  self_funding_amount      Decimal? @db.Decimal(12, 2)
  created_at               DateTime @default(now())
  updated_at               DateTime @default(now()) @updatedAt

  // Relations
  loan_application         LoanApplication @relation(fields: [loan_application_id], references: [id], onDelete: Cascade)

  @@map("financial_requirements")
}

// APPLICATION STATUS

model ApplicationStatus {
  id                    Int             @id @default(autoincrement())
  loan_application_id   Int             @unique
  status               ApplicationStatusEnum @default(PRE_APPROVED)
  priority_level       PriorityLevel   @default(LOW)
  application_notes    String?         @db.Text
  internal_notes       String?         @db.Text
  record_status        RecordStatus    @default(ACTIVE)
  created_at           DateTime        @default(now())
  updated_at           DateTime        @default(now()) @updatedAt

  // Relations
  loan_application     LoanApplication @relation(fields: [loan_application_id], references: [id], onDelete: Cascade)

  @@map("application_status")
}

// LENDER INFORMATION

model LenderInformation {
  id                        Int            @id @default(autoincrement())
  loan_application_id       Int            @unique
  primary_lender_id         String?
  primary_lender_name       String?
  loan_product_id           String?
  loan_product_name         String?
  loan_product_type         LoanProductType?
  interest_rate_offered     Decimal?       @db.Decimal(5, 2)
  interest_rate_type        InterestRateType?
  loan_tenure_years         Int?
  moratorium_period_months  Int?
  emi_amount               Decimal?       @db.Decimal(12, 2)
  processing_fee           Decimal?       @db.Decimal(12, 2)
  co_signer_required       Boolean        @default(false)
  collateral_required      Boolean        @default(false)
  collateral_type          String?
  collateral_value         Decimal?       @db.Decimal(12, 2)
  guarantor_details        String?        @db.Text
  created_at               DateTime       @default(now())
  updated_at               DateTime       @default(now()) @updatedAt

  // Relations
  loan_application         LoanApplication @relation(fields: [loan_application_id], references: [id], onDelete: Cascade)

  @@map("lender_information")
}

// DOCUMENT MANAGEMENT

model DocumentManagement {
  id                        Int      @id @default(autoincrement())
  loan_application_id       Int      @unique
  documents_required_list   String?  @db.Text
  documents_submitted_list  String?  @db.Text
  documents_pending_list    String?  @db.Text
  created_at               DateTime @default(now())
  updated_at               DateTime @default(now()) @updatedAt

  // Relations
  loan_application         LoanApplication @relation(fields: [loan_application_id], references: [id], onDelete: Cascade)

  @@map("document_management")
}

// PROCESSING TIMELINE

model ProcessingTimeline {
  id                           Int       @id @default(autoincrement())
  loan_application_id          Int       @unique
  lender_submission_date       DateTime?
  lender_acknowledgment_date   DateTime?
  approval_date               DateTime?
  sanction_letter_date        DateTime?
  disbursement_request_date   DateTime?
  disbursement_date           DateTime?
  total_processing_days       Int?
  sla_breach                  Boolean   @default(false)
  delay_reason                DelayReason?
  created_at                  DateTime  @default(now())
  updated_at                  DateTime  @default(now()) @updatedAt

  // Relations
  loan_application            LoanApplication @relation(fields: [loan_application_id], references: [id], onDelete: Cascade)

  @@map("processing_timeline")
}

// REJECTION DETAILS

model RejectionDetails {
  id                    Int            @id @default(autoincrement())
  loan_application_id   Int            @unique
  rejection_date        DateTime?
  rejection_reason      RejectionReason?
  rejection_details     String?        @db.Text
  appeal_submitted      Boolean        @default(false)
  appeal_outcome        AppealOutcome  @default(NOT_APPLICABLE)
  resolution_provided   String?        @db.Text
  created_at           DateTime       @default(now())
  updated_at           DateTime       @default(now()) @updatedAt

  // Relations
  loan_application     LoanApplication @relation(fields: [loan_application_id], references: [id], onDelete: Cascade)

  @@map("rejection_details")
}

// COMMUNICATION PREFERENCES

model CommunicationPreferences {
  id                          Int                    @id @default(autoincrement())
  loan_application_id         Int                    @unique
  communication_preference    CommunicationChannel   @default(EMAIL)
  follow_up_frequency        FollowUpFrequency      @default(AS_NEEDED)
  last_contact_date          DateTime?
  next_follow_up_date        DateTime?
  customer_satisfaction_rating Int?                  @db.SmallInt // 1-10
  customer_feedback          String?                @db.Text
  complaint_raised           Boolean                @default(false)
  complaint_details          String?                @db.Text
  complaint_resolution_date  DateTime?
  created_at                 DateTime               @default(now())
  updated_at                 DateTime               @default(now()) @updatedAt

  // Relations
  loan_application           LoanApplication        @relation(fields: [loan_application_id], references: [id], onDelete: Cascade)

  @@map("communication_preferences")
}

// SYSTEM TRACKING

model SystemTracking {
  id                      Int              @id @default(autoincrement())
  loan_application_id     Int              @unique
  application_source_system ApplicationSourceSystem @default(MANUAL_ENTRY)
  integration_status      IntegrationStatus @default(NOT_REQUIRED)
  audit_trail            String?          @db.Text
  hs_object_id           String?          // HubSpot integration
  hs_merged_object_ids   String?
  hs_object_source_label String?
  created_at             DateTime         @default(now())
  updated_at             DateTime         @default(now()) @updatedAt

  // Relations
  loan_application       LoanApplication  @relation(fields: [loan_application_id], references: [id], onDelete: Cascade)

  @@map("system_tracking")
}

// COMMISSION RECORDS (One-to-Many)

model CommissionRecord {
  id                         Int              @id @default(autoincrement())
  loan_application_id        Int
  commission_amount          Decimal?         @db.Decimal(12, 2)
  commission_rate            Decimal?         @db.Decimal(5, 2)
  commission_calculation_base CommissionBase?
  commission_status          CommissionStatus @default(NOT_APPLICABLE)
  commission_approval_date   DateTime?
  commission_payment_date    DateTime?
  partner_commission_applicable Boolean       @default(false)
  settlement_id             String?
  created_at                DateTime         @default(now())
  updated_at                DateTime         @default(now()) @updatedAt

  // Relations
  loan_application          LoanApplication  @relation(fields: [loan_application_id], references: [id], onDelete: Cascade)

  @@map("commission_records")
}

// ADDITIONAL SERVICES (One-to-Many)

model AdditionalService {
  id                    Int      @id @default(autoincrement())
  loan_application_id   Int
  service_name          String
  service_description   String?  @db.Text
  service_cost          Decimal? @db.Decimal(10, 2)
  notes                String?  @db.Text
  created_at           DateTime @default(now())
  updated_at           DateTime @default(now()) @updatedAt

  // Relations
  loan_application     LoanApplication @relation(fields: [loan_application_id], references: [id], onDelete: Cascade)

  @@map("additional_services")
}

// COMMUNICATION LOGS (One-to-Many)

model CommunicationLog {
  id                  Int                  @id @default(autoincrement())
  loan_application_id Int
  communication_type  CommunicationChannel
  contact_date        DateTime            @default(now())
  contact_subject     String?
  contact_notes       String?             @db.Text
  follow_up_required  Boolean             @default(false)
  contacted_by_id     Int?
  created_at         DateTime            @default(now())

  // Relations
  loan_application   LoanApplication     @relation(fields: [loan_application_id], references: [id], onDelete: Cascade)
  contacted_by       User?               @relation("UserCommunications", fields: [contacted_by_id], references: [id])

  @@index([contact_date])
  @@map("communication_logs")
}

model FileUpload {
  id                Int       @id @default(autoincrement())
  filename          String
  file_data         Json
  total_records     Int           @default(0)
  mime_type         String?

  // Relation to entity type
  entity_type_id    Int
  entity_type       FileEntity    @relation(fields: [entity_type_id], references: [id])


  // Processing status
  processed_records Int           @default(0)
  failed_records    Int           @default(0)

  // User tracking
  uploaded_by_id    Int
  uploaded_by       User          @relation("FileUpload",fields: [uploaded_by_id], references: [id])

  // Timestamps
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  processed_at      DateTime?

  @@index([entity_type_id])
  @@index([created_at])
  @@map("file_uploads")
}

model FileEntity {
  id          Int           @id @default(autoincrement())
  type        String        @unique  @map("type")
  description String?   @map("description")

  uploads     FileUpload[]

  @@index([type])
  @@map("file_entities")
}

model EmailType {
  id          Int      @id @default(autoincrement())
  subject     String   @unique @map("subject")
  type        String   @map("type")
  created_at  DateTime @default(now()) @map("created_at")
  
  // Relations
  emailHistories EmailHistory[]
  
  @@index([subject,type])
  @@map("email_types")
}

model EmailHistory {
  id              Int         @id @default(autoincrement())
  user_id         Int?         @map("user_id")
  reciepient 	String	      @map("reciepient")
  cc		String?                 @map("cc")
  bcc		String?	                @map("bcc")
  email_type_id   Int         @map("email_type_id")
  sent_at         DateTime?   @map("sent_at")
  created_at      DateTime    @default(now()) @map("created_at")
  
  // Relations
  user      User?      @relation("EmailHistory",fields: [user_id], references: [id])
  emailType EmailType @relation(fields: [email_type_id], references: [id])
  
  @@index([user_id])
  @@index([email_type_id])
  @@index([sent_at])
  @@map("email_history")
}

// ENUMS

enum ApplicationSource {
  DIRECT
  B2B_PARTNER   @map("B2B PARTNER")
  WEBSITE
  REFERRAL
  ADVERTISEMENT
}

enum CourseLevel {
  BACHELORS
  MASTERS
  PHD
  DIPLOMA
  CERTIFICATE
  PROFESSIONAL
}

enum AdmissionStatus {
  NOT_APPLIED   @map("NOT APPLIED")
  APPLIED
  ADMITTED
  WAITLISTED
  REJECTED
  DEFERRED
}

enum VisaStatus {
  NOT_APPLIED   @map("NOT APPLIED")
  APPLIED
  APPROVED
  REJECTED
  PENDING
}

enum I20CasStatus {
  YES
  NO
  NOT_APPLICABLE    @map("NOT APPLICABLE")
  PENDING
}

enum ApplicationStatusEnum {
  PRE_APPROVED          @map("Pre-Approved")
  APPROVED              @map("Approved")
  SANCTION_LETTER_ISSUED @map("Sanction Letter Issued")
  DISBURSEMENT_PENDING  @map("Disbursement Pending")
  DISBURSED             @map("Disbursed")
  REJECTED              @map("Rejected")
  ON_HOLD               @map("On Hold")
  WITHDRAWN             @map("Withdrawn")
  CANCELLED             @map("Cancelled")
}

enum PriorityLevel {
  HIGH
  MEDIUM
  LOW
  URGENT
}

enum RecordStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  ARCHIVED
}

enum LoanProductType {
  SECURED
  UNSECURED
  GOVERNMENT_SCHEME   @map("GOVERNMENT SCHEME")
}

enum InterestRateType {
  FIXED
  FLOATING
  HYBRID
}

enum DelayReason {
  INCOMPLETE_DOCUMENTS    @map("INCOMPLETE DOCUMENTS")
  CUSTOMER_NOT_RESPONDING   @map("CUSTOMER NOT RESPONDING")
  LENDER_PROCESSING   @map("LENDER PROCESSING")
  INTERNAL_REVIEW   @map("INTERNAL REVIEW")
  COMPLIANCE_CHECK    @map("COMPLIANCE CHECK")
  OTHER
}

enum RejectionReason {
  INSUFFICIENT_INCOME   @map("INSUFFICIENT INCOME")
  POOR_CREDIT_SCORE   @map("POOR CREDIT SCORE")
  INCOMPLETE_DOCUMENTS    @map("INCOMPLETE DOCUMENTS")
  COURSE_NOT_APPROVED   @map("COURSE NOT APPROVED")
  UNIVERSITY_NOT_APPROVED   @map("UNIVERSITY NOT APPROVED")
  HIGH_RISK_PROFILE   @map("HIGH RISK PROFILE")
  POLICY_CHANGES    @map("POLICY CHANGES")
  OTHER
}

enum AppealOutcome {
  PENDING
  APPROVED
  REJECTED
  NOT_APPLICABLE
}

enum CommunicationChannel {
  PHONE
  EMAIL
  WHATSAPP
  SMS
  VIDEO_CALL    @map("VIDEO CALL")
}

enum FollowUpFrequency {
  DAILY
  WEEKLY
  BI_WEEKLY   @map("BI WEEKLY")
  MONTHLY
  AS_NEEDED   @map("AS NEEDED")
}

enum ApplicationSourceSystem {
  MANUAL_ENTRY  @map("MANUAL_ENTRY")
  WEBSITE_FORM    @map("WEBSITE_FORM")
  PARTNER_PORTAL    @map("PARTNER_PORTAL")
  IMPORT
  API
}

enum IntegrationStatus {
  SYNCED
  PENDING_SYNC    @map("PENDING_SYNC")
  SYNC_FAILED   @map("SYNC_FAILED")
  NOT_REQUIRED    @map("NOT_REQUIRED")
}

enum CommissionBase {
  LOAN_AMOUNT   @map("LOAN_AMOUNT")
  FIXED_AMOUNT    @map("FIXED_AMOUNT")
  TIERED
}

enum CommissionStatus {
  NOT_APPLICABLE    @map("NOT_APPLICABLE")
  PENDING_CALCULATION   @map("PENDING_CALCULATION")
  CALCULATED
  APPROVED_FOR_PAYMENT    @map("APPROVED_FOR_PAYMENT")
  PAID
  ON_HOLD   @map("ON_HOLD")
}